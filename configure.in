dnl Configure script for the Eye of Gnome image viewer

AC_INIT(shell/main.c)

AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(eog, 2.5.2.1)

dnl make sure we keep ACLOCAL_FLAGS around for maintainer builds to work
AC_SUBST(ACLOCAL_AMFLAGS, "$ACLOCAL_FLAGS")

AM_MAINTAINER_MODE

dnl ================= Requirements ================================================

GNOME_VFS_REQUIRED=2.2.0
LIBGNOMEUI_REQUIRED=2.2.0
LIBBONOBOUI_REQUIRED=2.3.3
BONOBO_ACTIVATION_REQUIRED=1.0.3
LIBGLADE_REQUIRED=2.0.1
GDKPIXBUF_REQUIRED=2.2.1
LIBEXIF_REQUIRED=0.5.12
EEL_REQUIRED=2.2.0
LIBGNOMEPRINTUI_REQUIRED=2.2.1.1
LIBGNOMECANVAS_REQUIRED=1.113.0
GCONF_REQUIRED=2.2.0
LIBART_REQUIRED=2.2.0
GTK_REQUIRED=2.3.0

dnl ===============================================================================

AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC
AC_ARG_PROGRAM
AC_PROG_RANLIB

dnl ================= translation =============================================

GETTEXT_PACKAGE=eog
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE")
AC_SUBST(GETTEXT_PACKAGE)

ALL_LINGUAS="am ar az be bg bn ca cs cy da de el es et fa fi fr ga gl he hi hu id is it ja kn ko lt lv mk ml mn ms nl nn no pl pt pt_BR ro ru sl sk sq sr sr@Latn sv ta th tr uk vi wa zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT
AC_PROG_INTLTOOL

dnl ===============================================================================

GNOME_COMPILE_WARNINGS(yes)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

dnl ================= gnome libs check ====================================

GPI_MODULES="libgnomeprintui-2.2 >= $LIBGNOMEPRINTUI_REQUIRED gconf-2.0 >= $GCONF_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED libgnomecanvas-2.0 >= $LIBGNOMECANVAS_REQUIRED"
EOG_MODULES="gtk+-2.0 >= $GTK_REQUIRED gdk-pixbuf-2.0 >= $GDKPIXBUF_REQUIRED gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED libbonoboui-2.0 >= $LIBBONOBOUI_REQUIRED bonobo-activation-2.0 >= $BONOBO_ACTIVATION_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED eel-2.0 >= $EEL_REQUIRED $GPI_MODULES libart-2.0 >= $LIBART_REQUIRED"

dnl ============== optional exif support ====================

AC_ARG_WITH(libexif, [  --without-libexif	  disable special EXIF support])
have_exif=no
if test x$with_libexif != xno; then
    PKG_CHECK_MODULES(EXIF, libexif >= $LIBEXIF_REQUIRED, have_exif=yes, have_exif=no)
fi 

if test "x$have_exif" = "xyes"; then
  AC_DEFINE(HAVE_EXIF,1)
  EOG_MODULES="$EOG_MODULES libexif >= $LIBEXIF_REQUIRED"
fi

dnl ============== semi optional libjpeg support ====================
AC_ARG_WITH(libjpeg, [  --without-libjpeg	  disable special JPEG support])
  have_jpeg=no
  if test x$with_libjpeg != xno && test -z "$LIBJPEG"; then
    AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
      have_jpeg=yes,
      have_jpeg=no
      AC_MSG_WARN(*** JPEG loader will not be built (JPEG library not found) ***))
    if test "$have_jpeg" = yes; then
      AC_MSG_CHECKING([for jpeglib.h])
      AC_TRY_CPP(
[#include <stdio.h>
#undef PACKAGE
#undef VERSION
#undef HAVE_STDLIB_H
#include <jpeglib.h>],
        have_jpeg=yes,
        have_jpeg=no)
      AC_MSG_RESULT($have_jpeg)
      if test "$have_jpeg" = yes; then
        LIBJPEG='-ljpeg'
	AC_DEFINE(HAVE_JPEG, 1)
        AC_DEFINE(HAVE_LIBJPEG, 1)
        AC_CHECK_LIB(jpeg, jpeg_simple_progression,     
          AC_DEFINE(HAVE_PROGRESSIVE_JPEG),
          AC_MSG_WARN(JPEG library does not support progressive saving.))
      else
          AC_MSG_WARN(*** JPEG loader will not be built (JPEG header file not found) ***)
      fi
    fi
  fi

  if test x$with_libjpeg != xno && test -z "$LIBJPEG"; then
     AC_MSG_ERROR([
*** Checks for JPEG loader failed. You can build without it by passing 
*** --without-libjpeg to configure but some programs using GTK+ may
*** not work properly])
  fi
AC_SUBST(LIBJPEG)
AM_CONDITIONAL(ENABLE_JPEG, test x$have_jpeg = xyes)

dnl ============ CFLAGS & LIBS initialization ===============

PKG_CHECK_MODULES(GPI, $GPI_MODULES)
AC_SUBST(GPI_CFLAGS)

PKG_CHECK_MODULES(EOG, $EOG_MODULES)
AC_SUBST(EOG_CFLAGS)
AC_SUBST(EOG_LIBS)

dnl ================= corba/bonobo ===========================

# glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

BONOBO_IDLDIR="`$PKG_CONFIG --variable=idldir libbonobo-2.0`"
AC_SUBST(BONOBO_IDLDIR)

BONOBO_ACT_IDLDIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_ACT_IDLDIR)

dnl ================= GConf  =================================================

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

dnl ******************************************************
dnl X development libraries check
dnl ******************************************************
#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA

  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_SUBST(X_LIBS)

dnl ******************************************************
dnl Check for Sunkeysym.h
dnl ******************************************************
AC_CHECK_HEADERS(X11/Sunkeysym.h, AC_DEFINE(HAVE_SUNKEYSYM_H))

dnl ================= popt  ===============================

AC_CHECK_LIB(popt, poptGetArgs, [POPT_LIBS="-lpopt"],
AC_MSG_ERROR([popt is required to build eog.
You can download the latest version from ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.0.x/]))
AC_SUBST(POPT_LIBS)

AC_OUTPUT([
Makefile
eog.spec
art/Makefile
libeog/Makefile
libeog/cursors/Makefile
jpegutils/Makefile
libgpi/Makefile
collection/Makefile
viewer/Makefile
idl/Makefile
help/Makefile
help/C/Makefile
help/de/Makefile
help/es/Makefile
help/fr/Makefile
help/it/Makefile
help/sv/Makefile
help/ja/Makefile
help/ko/Makefile
help/zh_CN/Makefile
help/zh_TW/Makefile
shell/Makefile
shell/recent-files/Makefile
po/Makefile.in
])



echo "
Configuration:

	Source code location:	  ${srcdir}
	Compiler:		  ${CC} 

	Extra Compiler Warnings:  ${WARN_CFLAGS}
	Use libexif:              ${have_exif}
	Special JPEG support:     ${have_jpeg}
"
